CREATE TABLE AUDIT_ABSENCE_CHANGE(
CTIME TIMESTAMP,
TEXT VARCHAR(150)
);

CREATE TRIGGER TRIG_UPDATE_ABSCENCES
    AFTER UPDATE OF ABSENCES_EXCUSED ON E_GRADEBOOKS
    REFERENCING OLD AS O NEW AS N
    FOR EACH ROW
    BEGIN
        DECLARE V_TEXT VARCHAR(150);
        IF O.ABSENCES_EXCUSED != N.ABSENCES_NOT_EXCUSED
        THEN
        SET V_TEXT =  'OLD EXCUSED ABSCENCES: ' || CHAR(O.ABSENCES_EXCUSED) ||
                      'NEW EXCUSED ABSCENCES: ' || CHAR(N.ABSENCES_EXCUSED);
        END IF;

        IF O.ABSENCES_NOT_EXCUSED != N.ABSENCES_NOT_EXCUSED
        THEN
        SET V_TEXT = V_TEXT || ' OLD NOT EXCUSED ABSCENCES: ' || CHAR(O.ABSENCES_NOT_EXCUSED) ||
                      'NEW NOT EXCUSED ABSCENCES: ' || CHAR(N.ABSENCES_NOT_EXCUSED);
        END IF;

        INSERT INTO AUDIT_ABSENCE_CHANGE VALUES (CURRENT_TIMESTAMP, V_TEXT);
    END;

UPDATE E_GRADEBOOKS
SET ABSENCES_EXCUSED = ABSENCES_EXCUSED + 2, ABSENCES_NOT_EXCUSED = ABSENCES_NOT_EXCUSED + 2
WHERE STUDENT_NUMBER = 1 AND
CLASS_NUMBER = 8 AND
CLASS_LETTER = 'a';

-Drop the constraint and than creating trigger for checking the number in class
ALTER TABLE STUDENTS
DROP CONSTRAINT CHK_STUDENTS_NUMBER;

CREATE TRIGGER TRIG_INSERT_STUD
    BEFORE INSERT ON STUDENTS
    REFERENCING NEW AS N
    FOR EACH ROW
    BEGIN
        DECLARE NUM_OF_STUDENTS INTEGER;

        SET NUM_OF_STUDENTS = (SELECT COUNT(*) FROM STUDENTS
                                WHERE N.CLASS_LETTER = CLASS_LETTER
                                AND N.CLASS_NUMBER = CLASS_NUMBER);

        IF NUM_OF_STUDENTS >= 32
        THEN
            SIGNAL SQLSTATE '80000' SET MESSAGE_TEXT = 'The class is full';
        END IF;
    END;


-- Create a table to be used as a log for any changes in the grades.
CREATE TABLE CHANGED_CRADES
(
    CTIME TIMESTAMP,
    TEXT  VARCHAR(256)
);

-- Create a trigger that will log any changes in grades.
-- Line 76: We say that a grade has changed when its value is different from the old one.
CREATE TRIGGER TRIG_UPD_GRADE
    AFTER UPDATE OF VALUE
    ON GRADES
    REFERENCING OLD AS O NEW AS N
    FOR EACH ROW
    WHEN (O.VALUE <> N.VALUE)
BEGIN
    DECLARE V_TEXT VARCHAR(200);
    SET V_TEXT = USER || ' STUDENT = ' || (
        SELECT FIRST_NAME || ' ' || THIRD_NAME
        FROM STUDENTS S
        WHERE S.CLASS_LETTER = O.CLASS_LETTER
          AND S.CLASS_NUMBER = O.CLASS_NUMBER
          AND S.NUMBER = O.STUDENT) || ' OLD GRADE = ' || CHAR(O.VALUE)
        || ', NEW GRADE = ' || CHAR(N.VALUE);
    INSERT INTO CHANGED_CRADES
    VALUES (CURRENT_TIMESTAMP, V_TEXT);
END;

-- See the current grades.
SELECT *
FROM GRADES;

-- Increase the all grades that are < 5.00 with 1.
UPDATE GRADES
SET VALUE = VALUE + 1
WHERE VALUE < 5;

-- Validate the trigger.
SELECT *
FROM CHANGED_CRADES;

-- Create a trigger that will check whether a student must be expelled or not.
CREATE TRIGGER DROP_STUDENT
    BEFORE UPDATE OF ABSENCES_NOT_EXCUSED
    ON E_GRADEBOOKS
    REFERENCING NEW AS N
    FOR EACH ROW
    WHEN ( N.ABSENCES_NOT_EXCUSED > 14)
        SIGNAL SQLSTATE '80000' SET MESSAGE_TEXT='STUDENT HAS BE EXPELLED';

SELECT * FROM E_GRADEBOOKS;

-- Validate the trigger.
UPDATE E_GRADEBOOKS
SET ABSENCES_NOT_EXCUSED = 15
WHERE STUDENT_NUMBER = 15
AND CLASS_NUMBER = 8
AND CLASS_LETTER = 'b';

